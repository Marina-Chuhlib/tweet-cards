{"version":3,"file":"static/js/616.cf41297f.chunk.js","mappings":"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","sources":["shared/instance.js","webpack://tweet-cards/./src/modules/Tweets/TweetCard/TweetCard.module.css?ce5f","modules/Tweets/TweetCard/TweetCard.jsx","shared/toastify.js","webpack://tweet-cards/./src/modules/Tweets/Tweets.module.css?8b67","modules/Tweets/Tweets.jsx","pages/TweetsPage.jsx"],"sourcesContent":["import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://647874fa362560649a2dceb2.mockapi.io/app',\n});\n\nexport default instance;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TweetCard_container__HTe-U\",\"logoWrapper\":\"TweetCard_logoWrapper__myEC6\",\"logo\":\"TweetCard_logo__9HGMq\",\"tweetWrapper\":\"TweetCard_tweetWrapper__+1ZXt\",\"picture\":\"TweetCard_picture__b6gyj\",\"circle\":\"TweetCard_circle__j+W6B\",\"avatar\":\"TweetCard_avatar__fyn9Z\",\"text\":\"TweetCard_text__FJsS1\",\"btn\":\"TweetCard_btn__umjXM\",\"followingBtn\":\"TweetCard_followingBtn__vvGbI\",\"followBtn\":\"TweetCard_followBtn__7bgRK\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport instance from 'shared/instance';\n\nimport canvas from '../../../img/picture.png';\nimport logo from '../../../img/logo.png';\n\nimport css from './TweetCard.module.css';\n\nconst TweetCard = ({\n  user: { id, avatar, tweets, followers, isFollowers },\n  setUsers,\n}) => {\n  const [value, setValue] = useState(followers);\n  const text = isFollowers ? 'Following' : 'Follow';\n  const [texBtn, setTextBtn] = useState(text);\n  const [isFollow, setIsFollow] = useState(isFollowers);\n\n  const formatted = value.toLocaleString('en-US', { useGrouping: true });\n\n  const handleClick = () => {\n    const updatedValue = isFollow === true ? false : true;\n    const newValue = isFollow === true ? value - 1 : value + 1;\n\n    setIsFollow(updatedValue);\n    setValue(newValue);\n    fetchUpdateTweet(id, newValue, updatedValue);\n    toggleButton();\n    return;\n  };\n\n  const fetchUpdateTweet = async (id, value, isFollow) => {\n    try {\n      const { data } = await instance.put(`/tweets/${id}`, {\n        followers: value,\n        isFollowers: isFollow,\n      });\n\n      setUsers(prevUsers =>\n        prevUsers.map(user => {\n          if (user.id === id) {\n            return {\n              ...user,\n              followers: value,\n              isFollowers: isFollow,\n            };\n          }\n          return user;\n        })\n      );\n\n      if (!data) {\n        throw new Error();\n      }\n\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const toggleButton = () => {\n    const text = !isFollow ? 'Following' : 'Follow';\n    setTextBtn(text);\n    return;\n  };\n\n  const styles = texBtn === 'Following' ? css.followingBtn : css.followBtn;\n\n  return (\n    <div className={css.container}>\n      <img src={logo} alt=\"\" className={css.logo} />\n      <div className={css.logoWrapper}>\n        <img src={canvas} alt=\"canvas\" className={css.picture} />\n      </div>\n      <div className={css.tweetWrapper}>\n        <div className={css.circle}>\n          <img src={avatar} alt=\"avatar\" className={css.avatar} />\n        </div>\n        <p className={css.text}>Tweets: {tweets}</p>\n        <p>Followers: {formatted}</p>\n        <button\n          type=\"button\"\n          onClick={handleClick}\n          className={`${css.btn} ${styles}`}\n        >\n          {texBtn}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TweetCard;\n\nTweetCard.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    tweets: PropTypes.number.isRequired,\n    followers: PropTypes.number.isRequired,\n    isFollowers: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst infoStyle = {\n  background: '#b99ec0',\n  color: '#5f269c',\n  borderRadius: '40px',\n  fontSize: '16px',\n};\n\nexport const toastInfo = message => {\n  toast.info(message, {\n    style: infoStyle,\n  });\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"visuallyHidden\":\"Tweets_visuallyHidden__ElQjf\",\"container\":\"Tweets_container__RnaMC\",\"filter\":\"Tweets_filter__XNgWz\",\"filterBtn\":\"Tweets_filterBtn__Be09f\",\"list\":\"Tweets_list__Dxo1A\",\"item\":\"Tweets_item__Siz+d\",\"button\":\"Tweets_button__WI2ak\",\"select\":\"Tweets_select__EW91W\",\"notification\":\"Tweets_notification__VqpkU\",\"loadMoreBtn\":\"Tweets_loadMoreBtn__9EFym\"};","import { useEffect, useState, useRef } from 'react';\nimport instance from 'shared/instance';\n\nimport Loader from 'shared/Loader/Loader';\nimport TweetCard from './TweetCard/TweetCard';\n\nimport * as toasty from '../../shared/toastify';\n\nimport css from './Tweets.module.css';\n\nconst Tweets = () => {\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasPage, setHasPage] = useState(true);\n  const [activeFilter, setActiveFilter] = useState('');\n  const lastCardRef = useRef(null);\n\n  const getUsers = async page => {\n    try {\n      setIsLoading(true);\n      const { data: users } = await instance.get('/tweets', {\n        params: {\n          completed: false,\n          limit: 3,\n          page: page,\n        },\n      });\n      if (page === 1) {\n        setUsers(users);\n      }\n      return users;\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUsers(1);\n  }, []);\n\n  useEffect(() => {\n    if (lastCardRef.current) {\n      lastCardRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [currentPage]);\n\n  const loadMoreBtn = async () => {\n    const nextPage = currentPage + 1;\n    setIsLoading(true);\n    const newUsers = await getUsers(nextPage);\n    setUsers([...users, ...newUsers]);\n    setIsLoading(false);\n    setCurrentPage(nextPage);\n    if (newUsers.length === 0) {\n      setHasPage(false);\n      return;\n    }\n  };\n\n  const followingFilter = async () => {\n    const getAllUsers = await getUsers();\n    const followers = getAllUsers.filter(user => user.isFollowers === true);\n    if (followers.length === 0) {\n      return toasty.toastInfo('Following list empty');\n    }\n    setActiveFilter('following');\n    return setUsers(followers);\n  };\n\n  const followFilter = async () => {\n    const getAllUsers = await getUsers();\n    const followers = getAllUsers.filter(user => user.isFollowers !== true);\n    if (followers.length === 0) {\n      return toasty.toastInfo('Follow list empty');\n    }\n    setActiveFilter('follow');\n\n    return setUsers(followers);\n  };\n\n  const allTweetsFilter = async () => {\n    const allUsers = await getUsers();\n    setUsers(allUsers);\n    setHasPage(false);\n    setActiveFilter('allTweets');\n    return;\n  };\n\n  return (\n    <>\n      <section className={css.container}>\n        {isLoading && <Loader />}\n        <h2 className={css.visuallyHidden}>Tweets</h2>\n        {users.length > 0 && !isLoading && (\n          <div className={css.cardWrapper}>\n            <ul className={css.list}>\n              {users.map((user, index) => {\n                const isLastCard = index === users.length - 1;\n                return (\n                  <li\n                    key={user.id}\n                    className={css.item}\n                    ref={isLastCard ? lastCardRef : null}\n                  >\n                    <TweetCard user={user} id={user.id} setUsers={setUsers} />\n                  </li>\n                );\n              })}\n            </ul>\n            {hasPage && !activeFilter ? (\n              <>\n                <button onClick={loadMoreBtn} className={css.loadMoreBtn}>\n                  Load more tweets\n                </button>\n              </>\n            ) : (\n              <p className={css.notification}>Reached the end of the list</p>\n            )}\n          </div>\n        )}\n\n        <div className={css.filter}>\n          <button\n            onClick={followingFilter}\n            className={`${css.filterBtn} ${\n              activeFilter === 'following' ? 'active' : ''\n            }`}\n          >\n            Show following\n          </button>\n          <button\n            onClick={followFilter}\n            className={`${css.filterBtn} ${\n              activeFilter === 'follow' ? 'active' : ''\n            }`}\n          >\n            Show Follow\n          </button>\n          <button\n            onClick={allTweetsFilter}\n            className={`${css.filterBtn} ${\n              activeFilter === 'allTweets' ? 'active' : ''\n            }`}\n          >\n            Show all tweets\n          </button>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Tweets;\n","import Tweets from 'modules/Tweets/Tweets';\n\nconst TweetsPage = () => {\n  return (\n    <>\n      <Tweets />\n    </>\n  );\n};\n\nexport default TweetsPage;\n"],"names":["axios","baseURL","user","id","avatar","tweets","followers","isFollowers","setUsers","useState","value","setValue","text","texBtn","setTextBtn","isFollow","setIsFollow","formatted","toLocaleString","useGrouping","fetchUpdateTweet","instance","data","prevUsers","map","Error","console","error","toggleButton","styles","css","className","src","alt","type","onClick","updatedValue","newValue","infoStyle","background","color","borderRadius","fontSize","toastInfo","message","toast","style","users","isLoading","setIsLoading","currentPage","setCurrentPage","hasPage","setHasPage","activeFilter","setActiveFilter","lastCardRef","useRef","getUsers","page","params","completed","limit","useEffect","current","scrollIntoView","behavior","loadMoreBtn","nextPage","newUsers","length","followingFilter","getAllUsers","filter","toasty","followFilter","allTweetsFilter","allUsers","Loader","index","isLastCard","ref"],"sourceRoot":""}